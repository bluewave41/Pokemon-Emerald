// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int    @id @default(autoincrement())
  uuid     String @unique @default(uuid())
  username String @unique
  password String
}

model Map {
  id               Int       @id @default(autoincrement())
  name             String    @unique
  area             String
  width            Int
  height           Int
  backgroundTileId Int?
  MapTile          MapTile[]

  backgroundTile Tile?   @relation(fields: [backgroundTileId], references: [id])
  Events         Event[]
}

model Tile {
  id       Int     @id
  original String
  data     String  @unique
  overlay  Boolean @default(false)
  animated Boolean @default(false)
  sequence Int[]   @default([])
  delay    Int?

  MapTile   MapTile[]
  Maps      Map[]
  TileFrame TileFrame[]
}

model TileFrame {
  id     Int    @id @default(autoincrement())
  tileId Int
  data   String @unique

  tile Tile @relation(fields: [tileId], references: [id], onDelete: Cascade)
}

model MapTile {
  id          Int @id @default(autoincrement())
  mapId       Int
  tileId      Int
  x           Int
  y           Int
  permissions Int

  map  Map  @relation(fields: [mapId], references: [id], onDelete: Cascade)
  tile Tile @relation(fields: [tileId], references: [id], onDelete: Cascade)

  @@unique([mapId, x, y])
}

model Event {
  id    Int       @id @default(autoincrement())
  mapId Int
  type  EventType
  x     Int
  y     Int

  map  Map   @relation(fields: [mapId], references: [id], onDelete: Cascade)
  sign Sign?
}

model Sign {
  eventId Int    @unique
  text    String

  event Event @relation(fields: [eventId], references: [id])
}

model SpriteBank {
  id   Int    @id @default(autoincrement())
  name String @unique

  Sprites Sprites[]
}

model Sprites {
  id     Int    @id @default(autoincrement())
  bankId Int
  name   String
  data   String

  bank SpriteBank @relation(fields: [bankId], references: [id], onDelete: Cascade)

  @@unique([bankId, name])
}

enum EventType {
  SIGN
  WARP
}
