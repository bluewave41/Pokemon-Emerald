// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int    @id @default(autoincrement())
  uuid     String @unique @default(uuid())
  username String @unique
  password String
}

model Map {
  id               Int       @id @default(autoincrement())
  name             String    @unique
  width            Int
  height           Int
  backgroundTileId Int?
  MapTile          MapTile[]

  backgroundTile Tile?    @relation(fields: [backgroundTileId], references: [id])
  Events         Event[]
  Warp           Warp[]
  Scripts        Script[]
  Entity         Entity[]
}

model Tile {
  id                 Int        @id @default(autoincrement())
  hash               String     @unique @db.Char(32)
  original           String
  data               String
  overlay            Boolean    @default(false)
  animated           Boolean    @default(false)
  sequence           Int[]      @default([])
  delay              Int?
  activatedAnimation Boolean?
  repeating          Boolean?
  warpType           WarpType?
  jumpDirection      Direction?
  script             String?

  MapTile   MapTile[]
  Maps      Map[]
  TileFrame TileFrame[]
}

model TileFrame {
  id     Int    @id @default(autoincrement())
  tileId Int
  data   String @unique

  Tile Tile @relation(fields: [tileId], references: [id], onDelete: Cascade)
}

model MapTile {
  id          Int @id @default(autoincrement())
  mapId       Int
  tileId      Int
  x           Int
  y           Int
  permissions Int

  Map  Map  @relation(fields: [mapId], references: [id], onDelete: Cascade)
  Tile Tile @relation(fields: [tileId], references: [id], onDelete: Cascade)

  @@unique([mapId, x, y])
}

model Event {
  id    Int       @id @default(autoincrement())
  mapId Int
  type  EventType
  x     Int
  y     Int

  Map  Map   @relation(fields: [mapId], references: [id], onDelete: Cascade)
  Sign Sign?
  Warp Warp?
}

model Sign {
  id      Int    @id @default(autoincrement())
  eventId Int    @unique
  text    String

  Event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model Warp {
  id        Int       @id @default(autoincrement())
  eventId   Int       @unique
  mapId     Int?
  warpId    Int?
  type      WarpType
  direction Direction

  Event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  Map   Map?  @relation(fields: [mapId], references: [id], onDelete: Cascade)
}

model SpriteBank {
  id   Int    @id @default(autoincrement())
  name String @unique

  Sprite Sprite[]
  Entity Entity[]
}

model Sprite {
  id     Int    @id @default(autoincrement())
  bankId Int
  name   String
  data   String

  Bank SpriteBank @relation(fields: [bankId], references: [id], onDelete: Cascade)

  @@unique([bankId, name])
}

model Script {
  id        Int     @id @default(autoincrement())
  name      String
  mapId     Int
  condition String?
  setup     String?
  script    String?
  x         Int?
  y         Int?

  Map    Map      @relation(fields: [mapId], references: [id])
  Entity Entity[]
}

model Entity {
  id       Int    @id @default(autoincrement())
  entityId String
  mapId    Int
  x        Int
  y        Int
  bankId   Int
  scriptId Int

  Map        Map        @relation(fields: [mapId], references: [id], onDelete: Cascade)
  SpriteBank SpriteBank @relation(fields: [bankId], references: [id], onDelete: Cascade)
  Script     Script     @relation(fields: [scriptId], references: [id], onDelete: Cascade)
}

enum EventType {
  SIGN
  WARP
}

enum Direction {
  UP
  DOWN
  LEFT
  RIGHT
}

enum WarpType {
  DOOR
  CAVE
  STAIRS
}
